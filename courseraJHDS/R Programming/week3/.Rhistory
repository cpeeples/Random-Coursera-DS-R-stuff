library(datasets)
data(iris)
?iris
names(iris)
class(iris$Species)
names(iris$Species)
iris$Species[0,0]
iris$Species[0]
tapply(iris$Speal.Length,iris$Species,mean)
debug(tapply)
tapply(iris$Speal.Length,iris$Species,mean)
length(iris$Species)
length(iris$Sepal.Length)
iris$Species
tapply(iris$Sepal.Length,iris$Species,mean)
nn
Q
debug(Q)
tapply()
tapply(iris$Sepal.Length,iris$Species,mean)
undebug(tapply)
tapply(iris$Sepal.Length,iris$Species,mean)
colmean(iris)
colmeans(iris)
colMeans(iris)
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(iris)
tapply(iris$Sepal.Length,iris$Species,mean) #Q1
apply(iris[,1:4],2,mean) #Q2
data(mtcars)
?mtcars
tapply(mtcars$mpg,mtcars$cyl,mean)
names(mtcars)
tapply(mtcars$hp,mtcars$cyl,mean)
209.21429-82.63636
function(mean)
{}
<!-- -->
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x<-seq(1,10)
cachemean(x)
makeVector(x)
cachemean(x)
newx<-makeVector(x)
newx
cachemean(x)
cachemean(newx)
cachemean(newx)
setwd("~/projects/courseraJHDS/week3")
setwd("~/projects/courseraJHDS/week3")
<!-- -->
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
debug(makevector)
debug(makeVector)
x <- seq(1,10)
newx <- makeVector(x)
debug(cachemean)
cachemean(newx)
x
cachemean(newx)
x
cachemean(x)
diag(3)
x<-diag(3)
## These functions create a special matrix object that includes a cached matrix inverse
## When these fucntions are used to solve a matrix inverse, if the inverse is already cached,
## that is simply returned rather than solved.  This can save a lot of time, since matrix inversion
## is computationally intensive.
## This augments the standard matrix object with a cached inverse matrix.
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- inverse
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)){
message("getting cached data")
return(m)
}
data <- x$get()
i <- solve(x)
x$setinverse(i)
i
}
makeCacheMatrix(x)
newx<-makeCacheMatrix(x)
cacheSolve(x)
cacheSolve(newx)
debug(cacheSolve)
cacheSolve(newx)
class(x)
cacheSolve(newx)
## These functions create a special matrix object that includes a cached matrix inverse
## When these fucntions are used to solve a matrix inverse, if the inverse is already cached,
## that is simply returned rather than solved.  This can save a lot of time, since matrix inversion
## is computationally intensive.
## This augments the standard matrix object with a cached inverse matrix.
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- inverse
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)){
message("getting cached data")
return(m)
}
data <- x$get()
i <- solve(data,...)
x$setinverse(i)
i
}
newx<-makeCacheMatrix(x)
cacheSolve(newx)
## These functions create a special matrix object that includes a cached matrix inverse
## When these fucntions are used to solve a matrix inverse, if the inverse is already cached,
## that is simply returned rather than solved.  This can save a lot of time, since matrix inversion
## is computationally intensive.
## This augments the standard matrix object with a cached inverse matrix.
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)){
message("getting cached data")
return(m)
}
data <- x$get()
i <- solve(data,...)
x$setinverse(i)
i
}
newx<-makeCacheMatrix(x)
cacheSolve(newx)
cacheSolve(newx)
## These functions create a special matrix object that includes a cached matrix inverse
## When these fucntions are used to solve a matrix inverse, if the inverse is already cached,
## that is simply returned rather than solved.  This can save a lot of time, since matrix inversion
## is computationally intensive.
## This augments the standard matrix object with a cached inverse matrix.
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data,...)
x$setinverse(i)
i
}
newx<-makeCacheMatrix(x)
cacheSolve(newx)
cacheSolve(newx)
x<-10*x
newx<-makeCacheMatrix(x)
cacheSolve(newx)
cacheSolve(newx)
x1<-c(rand(20,30,0,0))
x1<-c(randu(20,30,0,0))
x1<-c(unirand(20,30,0,0))
## These functions create a special matrix object that includes a cached matrix inverse
## When these fucntions are used to solve a matrix inverse, if the inverse is already cached,
## that is simply returned rather than solved.  This can save a lot of time, since matrix inversion
## is computationally intensive.
## This augments the standard matrix object with a cached inverse matrix.
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data,...)
x$setinverse(i)
i
}
newx<-makeCacheMatrix(x)
cacheSolve(newx)
cacheSolve(newx)
mat<-(NA,10,10)
mat<-matrix(NA,10,10)
mat
mat[row(mat)+col(mat<=11)]
mat[row(mat)+col(mat<=11)]<-runif(1,30,100)
mat
mat[row(mat)+col(mat<=11)]<-c(runif(1,30,100))
mat
runif(1,30,100)
runif(100,1,30)
mat[row(mat)+col(mat<=11)]<-c(runif(100,1,30))
mat
mat[row(mat)+col(mat<=11)]
mat
mat[row(mat)+col(mat)<=11]
mat[row(mat)+col(mat)<=1)]<-c(runif(100,1,30))
mat[row(mat)+col(mat)<=1]<-c(runif(100,1,30))
mat
mat[row(mat)+col(mat)<=11]<-c(runif(100,1,30))
mat[row(mat)+col(mat)<=11]
mat[row(mat)+col(mat)<=11]<-c(runif(50,1,30))
mat[row(mat)+col(mat)<=11]
mat[row(mat)+col(mat)<=10]
mat[row(mat)+col(mat)<=11]
mat
mat[row(mat)+col(mat)<=1]
mat[row(mat)+col(mat)<=10]
source('~/projects/courseraJHDS/week3/programming2/ProgrammingAssignment2/matgen.R')
UTSqrmatgen
UTSqrmatgen()
UTsqrmatgen()
n^2
n=10
n^2/2
debug(UTsqrmatgen)
UTsqrmatgen()
source('~/projects/courseraJHDS/week3/programming2/ProgrammingAssignment2/matgen.R')
UTsqrmatgen()
debug(UTsqrmatgen)
UTsqrmatgen()
vals
mat[row(mat) + col(mat) <= n]
source('~/projects/courseraJHDS/week3/programming2/ProgrammingAssignment2/matgen.R')
source('~/projects/courseraJHDS/week3/programming2/ProgrammingAssignment2/matgen.R')
UTsqrmatgen()
mat[row(mat)+col(mat) <= 10]
mat
mat[row(mat)+col(mat)+2 <= 10]
mat[row(mat)+col(mat)+1 <= 10]
mat[row(mat)+col(mat)+1 <= 11]
mat[row(mat)+col(mat)+2 <= 11]
source('~/projects/courseraJHDS/week3/programming2/ProgrammingAssignment2/matgen.R')
UTsqrmatgen()
newmat<-UTsqrmatgen
newmat
newmat<-UTsqrmatgen()
newmat
source('~/projects/courseraJHDS/week3/programming2/ProgrammingAssignment2/matgen.R')
newmat<-UTsqrmatgen()
newmat
makeCacheMatrix(newmat)
cacheSolve(newmat)
cacheSolve(makeCacheMatrix(newmat))
cacheSolve(makeCacheMatrix(newmat))
source('~/projects/courseraJHDS/week3/programming2/ProgrammingAssignment2/matgen.R')
newmat<-UTsqrmatgen()
cacheSolve(makeCacheMatrix(newmat))
cacheSolve(makeCacheMatrix(newmat))
cacheSolve(makeCacheMatrix(newmat))
newnemat<-makeCacheMatrix(newmat)
cacheSolve(newnewmat)
cacheSolve(newnemat)
cacheSolve(newnemat)
inv<-cacheSolve(newnemat)
inv*newmat
newmat
source('~/projects/courseraJHDS/week3/programming2/ProgrammingAssignment2/matgen.R')
UTsqrmatgen()
source('~/projects/courseraJHDS/week3/programming2/ProgrammingAssignment2/matgen.R')
UTsqrmatgen()
newmat<-UTsqrmatgen()
newnewmat<-makeCacheMatrix(newmat)
inv<-cacheSolve(newnewmat)
inv
inv*newmat
newmat*inv
newmat%*%inv
inv<-cacheSolve(newnewmat)
inv
newmat<UTsqrmatgen()
newmat<-UTsqrmatgen()
newnewmat(makeCacheMatrix(newmat))
newnewmat<-(makeCacheMatrix(newmat))
cacheSovle(newnewmat)
cacheSolve(newnewmat)
cacheSolve(newnewmat)
invcacheSolve(newnewmat)
inv<-cacheSolve(newnewmat)
inv%*%newmat
source('~/projects/courseraJHDS/week3/programming2/ProgrammingAssignment2/matgen.R')
mat<-UTsqrmatgen(100)
newmat(makeCacheMatrix(mat))
newmat<-(makeCacheMatrix(mat))
inv<-cacheSolve(newmat)
mat
solve(mat)
mat<-UTsqrmatgen(50)
solve(mat)
mat<-UTsqrmatgen(90)
solve(mat)
mat<-UTsqrmatgen(100)
solve(mat)
mat<-UTsqrmatgen(1000)
solve(mat)
mat<-UTsqrmatgen(1000)
solve(mat)
mat<-UTsqrmatgen(1000)
solve(mat)
mat<-UTsqrmatgen(500)
solve(mat)
mat<-UTsqrmatgen(200)
solve(mat)
mat<-UTsqrmatgen(100)
solve(mat)
mat<-UTsqrmatgen(100)
mat<-UTsqrmatgen(1000,1,10000)
solve(mat)
mat<-UTsqrmatgen(1000,1,100000)
solve(mat)
solve(mat)
mat<-UTsqrmatgen(1000,1,100000)
solve(mat)
mat<-UTsqrmatgen(1000,200,100000)
solve(mat)
mat<-UTsqrmatgen(100,200,100000)
solve(mat)
mat<-UTsqrmatgen(50,200,100000)
solve(mat)
mat<-UTsqrmatgen(1000,1,10)
solve(mat)
mat<-UTsqrmatgen(1000,1,5)
solve(mat)
mat<-UTsqrmatgen(100,1,5)
solve(mat)
mat<-UTsqrmatgen(200,1,5)
solve(mat)
mat<-UTsqrmatgen(100,10,15)
solve(mat)
mat<-UTsqrmatgen(1000,10,15)
solve(mat)
mat<-UTsqrmatgen(10000,10,15)
solve(mat)
